name: "Code Quality Checks"

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'mock'
        type: choice
        options:
          - mock
          - real
          - both
      environment:
        description: 'Environment to run tests in'
        required: false
        default: 'test'
        type: choice
        options:
          - dev
          - test
          - prod
  workflow_call:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'mock'
        type: string
      environment:
        description: 'Environment to run tests in'
        required: false
        default: 'test'
        type: string

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check code formatting with Black
        run: |
          black --check --diff konveyor tests
        continue-on-error: true  # Make Black checks optional for now

      - name: Check import sorting with isort
        run: |
          isort --check --diff konveyor tests
        continue-on-error: true  # Make isort checks optional for now


  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: konveyor.settings.testing
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      # Deploy infrastructure for testing if real tests are needed
      - name: Azure Login
        if: ${{ github.event.inputs.test_type == 'real' || github.event.inputs.environment == 'test' || github.event.inputs.environment == 'prod' }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set up Terraform
        if: ${{ github.event.inputs.test_type == 'real' || github.event.inputs.environment == 'test' || github.event.inputs.environment == 'prod' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'
          
      - name: Deploy Infrastructure
        if: ${{ github.event.inputs.test_type == 'real' || github.event.inputs.environment == 'test' || github.event.inputs.environment == 'prod' }}
        id: deploy-infra
        run: |
          cd Konveyor-infra/environments/${{ github.event.inputs.environment || 'test' }}
          terraform init
          terraform validate
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
          
          # Export environment variables for tests
          echo "AZURE_SEARCH_ENDPOINT=$(terraform output -raw cognitive_search_endpoint)" >> $GITHUB_ENV
          echo "AZURE_COGNITIVE_SEARCH_ENDPOINT=$(terraform output -raw cognitive_search_endpoint)" >> $GITHUB_ENV
          echo "AZURE_SEARCH_API_KEY=$(terraform output -raw cognitive_search_primary_key)" >> $GITHUB_ENV
          echo "AZURE_OPENAI_ENDPOINT=$(terraform output -raw openai_endpoint)" >> $GITHUB_ENV
          echo "AZURE_OPENAI_API_KEY=$(terraform output -raw openai_primary_key)" >> $GITHUB_ENV
          echo "AZURE_OPENAI_EMBEDDING_DEPLOYMENT=$(terraform output -raw openai_embeddings_deployment_name)" >> $GITHUB_ENV
          echo "AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT=$(terraform output -raw document_intelligence_endpoint)" >> $GITHUB_ENV
          echo "AZURE_DOCUMENT_INTELLIGENCE_API_KEY=$(terraform output -raw document_intelligence_primary_key)" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONNECTION_STRING=$(terraform output -raw storage_connection_string)" >> $GITHUB_ENV

      - name: Build Docker image for testing
        run: |
          docker build -t konveyor-test:latest .
          
      - name: Run tests with coverage in Docker
        run: |
          docker run --rm \
            -e AZURE_SEARCH_ENDPOINT="$AZURE_SEARCH_ENDPOINT" \
            -e AZURE_SEARCH_API_KEY="$AZURE_SEARCH_API_KEY" \
            -e AZURE_OPENAI_ENDPOINT="$AZURE_OPENAI_ENDPOINT" \
            -e AZURE_OPENAI_API_KEY="$AZURE_OPENAI_API_KEY" \
            -e AZURE_OPENAI_EMBEDDING_DEPLOYMENT="$AZURE_OPENAI_EMBEDDING_DEPLOYMENT" \
            -e AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT="$AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT" \
            -e AZURE_DOCUMENT_INTELLIGENCE_API_KEY="$AZURE_DOCUMENT_INTELLIGENCE_API_KEY" \
            -e AZURE_STORAGE_CONNECTION_STRING="$AZURE_STORAGE_CONNECTION_STRING" \
            -v $(pwd)/tests/results:/app/tests/results \
            konveyor-test:latest \
            bash -c "coverage run --source=konveyor manage.py test && coverage report && coverage xml"
          
      - name: Copy coverage report from Docker
        run: |
          mkdir -p coverage
          docker run --rm -v $(pwd)/coverage:/output konveyor-test:latest cp coverage.xml /output/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage.xml
          fail_ci_if_error: false
